/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FavoriteAlarmPanel.java
 *
 * Created on Feb 9, 2012, 11:15:03 PM
 */
package alarmclock;

import java.util.logging.Level;
import java.util.logging.Logger;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

/**
 *
 * @author Gordon
 */
public class FavoriteAlarmPanel extends javax.swing.JPanel {

    private AlarmStarter alarmStarter;
    public void setAlarmStarter(AlarmStarter starter){
        this.alarmStarter = starter;
    }
    
    private DateTime time;
    private String exePathStr;
    
    /** Creates new form FavoriteAlarmPanel */
    public FavoriteAlarmPanel(DateTime time, String exePath) {
        this.time = time;
        this.exePathStr = exePath;
        
        initComponents();
        
        this.update();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exePath = new javax.swing.JLabel();
        setTime = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        exePath.setText("www.pandora.com");

        setTime.setText("12:00 AM");

        startButton.setText("Start");
        startButton.setPreferredSize(new java.awt.Dimension(63, 20));
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(setTime, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exePath, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exePath)))
            .addComponent(setTime)
        );
    }// </editor-fold>//GEN-END:initComponents

private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
    //calculate the next day's time
    DateTime almTime = new DateTime().millisOfDay().setCopy(this.time.getMillisOfDay());     
    if(almTime.isBefore(System.currentTimeMillis()))
        almTime = almTime.dayOfMonth().addToCopy(1);
    this.alarmStarter.startAlarm(almTime, exePathStr);
    
}//GEN-LAST:event_startButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel exePath;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel setTime;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables


    public void update(){
        this.exePath.setText(exePathStr);
        this.setTime.setText(this.time.toString("h:mm a"));
    }
    
    public void addRemoveButtonListener(java.awt.event.ActionListener l){
        this.removeButton.addActionListener(l);
    }
    
    public void removeRemoveButtonListener(java.awt.event.ActionListener l){
        this.removeButton.removeActionListener(l);
    }
    
    
    private static DateTimeFormatter serializeFormatter = DateTimeFormat.forPattern("h:mm a");
    public static String Serialize(FavoriteAlarmPanel panel){
        String ret = panel.time.toString(serializeFormatter) + "|" + panel.exePathStr;
        return ret;
    }
    
    public static FavoriteAlarmPanel Deserialize(String str){
        String[] strs = str.split("\\|");
        if(strs.length < 2) return null;
        
        
        try {
            DateTime time = serializeFormatter.parseDateTime(strs[0]);
            if (time == null) {
                return null;
            }
            
            String exePath = strs[1];
            
            return new FavoriteAlarmPanel(time, exePath);
        } catch (Exception ex) {
            Logger logger = Logger.getLogger(FavoriteAlarmPanel.class.getName());
            logger.log(Level.WARNING, "Could not parse string " + str + ": " + ex.toString());
            return null;
        }
        
    }
}
