/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Feb 9, 2012, 12:07:46 AM
 */
package alarmclock;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.Comparator;
import java.util.EventObject;
import java.util.Properties;
import java.util.SortedSet;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import org.joda.time.DateTime;

/**
 *
 * @author Gordon
 */
public class MainFrame extends javax.swing.JFrame {

    private Timer timer = new Timer();
    
    private SortedSet<AlarmPanel> alarms = new java.util.TreeSet<AlarmPanel>(
            new Comparator<AlarmPanel>(){
                @Override
                public int compare(AlarmPanel o1, AlarmPanel o2) {
                    return o1.getAlarm().getTime().compareTo(o2.getAlarm().getTime());
                }
            });
    
    private final JFileChooser fileChooser = new JFileChooser();
    
    private ProcessStarter pStarter;
    
    private PropertiesLoader propsLoader;
    
    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    public void init(){
                
        this.loadFavoriteAlarms();
        
        
        timer.schedule(new TimerTask(){
            @Override
            public void run() {
                MainFrame.this.update();
            }
        }, 0, 1000);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setSpinner = new javax.swing.JSpinner();
        exePath = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        setAlarmsPanel = new javax.swing.JPanel();
        chooseButton = new javax.swing.JButton();
        setButton = new javax.swing.JButton();
        errorText = new javax.swing.JLabel();
        CurrentTime = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        favoritesPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        setSpinner.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        setSpinner.setModel(new javax.swing.SpinnerDateModel());
        setSpinner.setEditor(new javax.swing.JSpinner.DateEditor(setSpinner, "h:mm a"));

        exePath.setMinimumSize(new java.awt.Dimension(200, 20));
        exePath.setPreferredSize(new java.awt.Dimension(200, 20));
        exePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exePathActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1000, 100));

        setAlarmsPanel.setMaximumSize(new java.awt.Dimension(65535, 65535));
        setAlarmsPanel.setLayout(new javax.swing.BoxLayout(setAlarmsPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(setAlarmsPanel);

        chooseButton.setText("Choose");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        setButton.setText("Set");
        setButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setButtonActionPerformed(evt);
            }
        });

        errorText.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        errorText.setForeground(new java.awt.Color(255, 51, 51));
        errorText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        CurrentTime.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        CurrentTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CurrentTime.setText("12:00 AM");

        favoritesPanel.setLayout(new javax.swing.BoxLayout(favoritesPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(favoritesPanel);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                            .addComponent(errorText, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(setButton, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(exePath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(setSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chooseButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE))
                    .addComponent(CurrentTime, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(CurrentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(setSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exePath, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chooseButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveButton)
                            .addComponent(setButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorText, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void exePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exePathActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_exePathActionPerformed

private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
    this.errorText.setText("");
    
    int returnVal = fileChooser.showOpenDialog(this);
    
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        this.exePath.setText(file.getPath());
    } else {
        this.errorText.setText("File choose cancelled: " + returnVal);
    }
}//GEN-LAST:event_chooseButtonActionPerformed

private void setButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setButtonActionPerformed
    this.errorText.setText("");
    DateTime almTime = new DateTime(this.setSpinner.getValue());
    almTime = new DateTime().millisOfDay().setCopy(almTime.getMillisOfDay());
    if(almTime.isBefore(System.currentTimeMillis()))
        almTime = almTime.dayOfMonth().addToCopy(1);
    
    this.setAlarm(almTime, this.exePath.getText());
    
}//GEN-LAST:event_setButtonActionPerformed

private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    this.setFavorite(new DateTime(this.setSpinner.getValue()), this.exePath.getText());
    
    SwingWorker sw = new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
                MainFrame.this.saveFavoriteAlarms();
                return null;
            }        
    };
    sw.execute();
    
}//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        final MainFrame mf = new MainFrame();
        mf.pStarter = new RealProcessStarter();
        mf.propsLoader = new LocalDiskPropertiesLoader();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                mf.init();
                mf.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CurrentTime;
    private javax.swing.JButton chooseButton;
    private javax.swing.JLabel errorText;
    private javax.swing.JTextField exePath;
    private javax.swing.JPanel favoritesPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel setAlarmsPanel;
    private javax.swing.JButton setButton;
    private javax.swing.JSpinner setSpinner;
    // End of variables declaration//GEN-END:variables


    private void update(){
        java.awt.EventQueue.invokeLater(new Runnable(){
            @Override
            public void run() {
                DateTime now = new DateTime();
                MainFrame.this.CurrentTime.setText(now.toString("MMM d, yyyy h:mm:ss a"));                 
            }
        });     
        
    }
    
    private SetAlarm setAlarm(DateTime time, String exePath){
        final SetAlarm alm = new SetAlarm(
                time,
                exePath);
        alm.setTimer(this.timer);
        alm.setProcessStarter(this.pStarter);

        final AlarmPanel panel = new AlarmPanel();
        panel.setAlarm(alm);
        try {
            alm.Start();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            this.errorText.setText("Can't start alarm: " + ex.toString());
            return null;
        }
        
        
        this.alarms.add(panel);
        alm.addAlarmListener(new SetAlarm.AlarmListener(){

                @Override
                public void cancelled(EventObject evt) {
                    java.awt.EventQueue.invokeLater(new Runnable(){
                        @Override
                        public void run() {
                            MainFrame.this.alarms.remove(panel);
                            MainFrame.this.updateAlarmsPanel();                            
                        }
                    });     
                    alm.removeAlarmListener(this);
                }

                @Override
                public void finished(EventObject evt){
                    java.awt.EventQueue.invokeLater(new Runnable(){
                        @Override
                        public void run() {
                            MainFrame.this.alarms.remove(panel);
                            MainFrame.this.updateAlarmsPanel();
                        }
                    });     
                    alm.removeAlarmListener(this);
                }

                @Override
                public void error(final Throwable ex) {
                    java.awt.EventQueue.invokeLater(new Runnable(){
                        @Override
                        public void run() {
                            MainFrame.this.alarms.remove(panel);
                            MainFrame.this.updateAlarmsPanel();
                            MainFrame.this.errorText.setText("Error activating alarm: " + ex.toString());
                        }
                    });     
                    alm.removeAlarmListener(this);
                }
        });


        panel.setVisible(true);
        this.updateAlarmsPanel();
        
        return alm;
    }

    private FavoriteAlarmPanel setFavorite(DateTime time, String exePath){
        if(exePath.trim().isEmpty())
            return null;
        
        if(time == null)
            return null;
        
        final FavoriteAlarmPanel fave = new FavoriteAlarmPanel(time, exePath);
        this.hookupFavorite(fave);
        this.favoritesPanel.add(fave);
        fave.setVisible(true);
        this.favoritesPanel.repaint();
        
        return fave;
    }
    
    private void hookupFavorite(final FavoriteAlarmPanel fave){
        fave.setAlarmStarter(new AlarmStarter(){
                @Override
                public SetAlarm startAlarm(DateTime alarmDate, String exePath) {
                    return MainFrame.this.setAlarm(alarmDate, exePath);
                }
        });
        fave.addRemoveButtonListener(new ActionListener(){

                @Override
                public void actionPerformed(ActionEvent e) {
                    MainFrame.this.favoritesPanel.remove(fave);
                    MainFrame.this.favoritesPanel.repaint();
                    MainFrame.this.saveFavoriteAlarms();
                }
            });

    }
    
    private void updateAlarmsPanel(){
        this.setAlarmsPanel.removeAll();
        for(AlarmPanel p : this.alarms){
            this.setAlarmsPanel.add(p);            
        }
        this.setAlarmsPanel.repaint();
    }
    
    private void loadFavoriteAlarms(){
        Properties favAlarms = this.propsLoader.loadProperties("FavoriteAlarms.properties");
        
        for(String s : favAlarms.stringPropertyNames()){
            FavoriteAlarmPanel alm = FavoriteAlarmPanel.Deserialize(s);
            this.hookupFavorite(alm);
            this.favoritesPanel.add(alm);
            alm.setVisible(true);            
        }
        
        this.favoritesPanel.repaint();
    }
                
    private void saveFavoriteAlarms(){
        Properties favAlarms = new Properties();
        for(Component comp : this.favoritesPanel.getComponents()){
            if(comp instanceof FavoriteAlarmPanel){
                
                String key = FavoriteAlarmPanel.Serialize((FavoriteAlarmPanel)comp);
                favAlarms.setProperty(key, "");
            }
        }
        try {
            this.propsLoader.saveProperties("FavoriteAlarms.properties", favAlarms);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            this.errorText.setText("Can't save favorites: " + ex.toString());
        }
        
    }
}
